{"remainingRequest":"C:\\Users\\liuli\\source\\repos\\github\\WalkingTec.Mvvm\\WebApplication7\\ClientApp\\node_modules\\babel-loader\\lib\\index.js??ref--4-oneOf-1-1!C:\\Users\\liuli\\source\\repos\\github\\WalkingTec.Mvvm\\WebApplication7\\ClientApp\\node_modules\\draft-js\\lib\\editOnCopy.js","dependencies":[{"path":"C:\\Users\\liuli\\source\\repos\\github\\WalkingTec.Mvvm\\WebApplication7\\ClientApp\\node_modules\\draft-js\\lib\\editOnCopy.js","mtime":1516488152000},{"path":"C:\\Users\\liuli\\source\\repos\\github\\WalkingTec.Mvvm\\WebApplication7\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\liuli\\source\\repos\\github\\WalkingTec.Mvvm\\WebApplication7\\ClientApp\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnCopy\n * @format\n * \n */\n'use strict';\n\nvar getFragmentFromSelection = require('./getFragmentFromSelection');\n/**\n * If we have a selection, create a ContentState fragment and store\n * it in our internal clipboard. Subsequent paste events will use this\n * fragment if no external clipboard data is supplied.\n */\n\n\nfunction editOnCopy(editor, e) {\n  var editorState = editor._latestEditorState;\n  var selection = editorState.getSelection(); // No selection, so there's nothing to copy.\n\n  if (selection.isCollapsed()) {\n    e.preventDefault();\n    return;\n  }\n\n  editor.setClipboard(getFragmentFromSelection(editor._latestEditorState));\n}\n\nmodule.exports = editOnCopy;",{"version":3,"sources":["C:\\Users\\liuli\\source\\repos\\github\\WalkingTec.Mvvm\\WebApplication7\\ClientApp\\node_modules\\draft-js\\lib\\editOnCopy.js"],"names":["getFragmentFromSelection","require","editOnCopy","editor","e","editorState","_latestEditorState","selection","getSelection","isCollapsed","preventDefault","setClipboard","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAaA;;AAEA,IAAIA,wBAAwB,GAAGC,OAAO,CAAC,4BAAD,CAAtC;AAEA;;;;;;;AAKA,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,CAA5B,EAA+B;AAC7B,MAAIC,WAAW,GAAGF,MAAM,CAACG,kBAAzB;AACA,MAAIC,SAAS,GAAGF,WAAW,CAACG,YAAZ,EAAhB,CAF6B,CAI7B;;AACA,MAAID,SAAS,CAACE,WAAV,EAAJ,EAA6B;AAC3BL,IAAAA,CAAC,CAACM,cAAF;AACA;AACD;;AAEDP,EAAAA,MAAM,CAACQ,YAAP,CAAoBX,wBAAwB,CAACG,MAAM,CAACG,kBAAR,CAA5C;AACD;;AAEDM,MAAM,CAACC,OAAP,GAAiBX,UAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnCopy\n * @format\n * \n */\n\n'use strict';\n\nvar getFragmentFromSelection = require('./getFragmentFromSelection');\n\n/**\n * If we have a selection, create a ContentState fragment and store\n * it in our internal clipboard. Subsequent paste events will use this\n * fragment if no external clipboard data is supplied.\n */\nfunction editOnCopy(editor, e) {\n  var editorState = editor._latestEditorState;\n  var selection = editorState.getSelection();\n\n  // No selection, so there's nothing to copy.\n  if (selection.isCollapsed()) {\n    e.preventDefault();\n    return;\n  }\n\n  editor.setClipboard(getFragmentFromSelection(editor._latestEditorState));\n}\n\nmodule.exports = editOnCopy;"]}]}