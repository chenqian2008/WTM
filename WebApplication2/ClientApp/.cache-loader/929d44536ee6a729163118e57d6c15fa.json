{"remainingRequest":"C:\\Users\\liuli\\source\\repos\\github\\WalkingTec.Mvvm\\WebApplication2\\ClientApp\\node_modules\\babel-loader\\lib\\index.js??ref--4-oneOf-1-1!C:\\Users\\liuli\\source\\repos\\github\\WalkingTec.Mvvm\\WebApplication2\\ClientApp\\node_modules\\rc-tree-select\\es\\Select.js","dependencies":[{"path":"C:\\Users\\liuli\\source\\repos\\github\\WalkingTec.Mvvm\\WebApplication2\\ClientApp\\node_modules\\rc-tree-select\\es\\Select.js","mtime":499162500000},{"path":"C:\\Users\\liuli\\source\\repos\\github\\WalkingTec.Mvvm\\WebApplication2\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\liuli\\source\\repos\\github\\WalkingTec.Mvvm\\WebApplication2\\ClientApp\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * ARIA: https://www.w3.org/TR/wai-aria/#combobox\n * Sample 1: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/combobox/aria1.1pattern/listbox-combo.html\n * Sample 2: https://www.w3.org/blog/wai-components-gallery/widget/combobox-with-aria-autocompleteinline/\n *\n * Tab logic:\n * Popup is close\n * 1. Focus input (mark component as focused)\n * 2. Press enter to show the popup\n * 3. If popup has input, focus it\n *\n * Popup is open\n * 1. press tab to close the popup\n * 2. Focus back to the selection input box\n * 3. Let the native tab going on\n *\n * TreeSelect use 2 design type.\n * In single mode, we should focus on the `span`\n * In multiple mode, we should focus on the `input`\n */\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { polyfill } from 'react-lifecycles-compat';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport shallowEqual from 'shallowequal';\nimport raf from 'raf';\nimport SelectTrigger from './SelectTrigger';\nimport { selectorContextTypes } from './Base/BaseSelector';\nimport { popupContextTypes } from './Base/BasePopup';\nimport SingleSelector from './Selector/SingleSelector';\nimport MultipleSelector, { multipleSelectorContextTypes } from './Selector/MultipleSelector';\nimport SinglePopup from './Popup/SinglePopup';\nimport MultiplePopup from './Popup/MultiplePopup';\nimport { SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './strategies';\nimport { createRef, generateAriaId, formatInternalValue, formatSelectorValue, parseSimpleTreeData, convertDataToTree, convertTreeToEntities, conductCheck, getHalfCheckedKeys, flatToHierarchy, isPosRelated, isLabelInValue, getFilterTree, cleanEntity } from './util';\nimport { valueProp } from './propTypes';\nimport SelectNode from './SelectNode';\n\nvar Select =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Select, _React$Component);\n\n  function Select(_props) {\n    var _this;\n\n    _classCallCheck(this, Select);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Select).call(this, _props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSelectorFocus\", function () {\n      _this.setState({\n        focused: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSelectorBlur\", function () {\n      _this.setState({\n        focused: false\n      }); // TODO: Close when Popup is also not focused\n      // this.setState({ open: false });\n\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onComponentKeyDown\", function (event) {\n      var open = _this.state.open;\n      var keyCode = event.keyCode;\n\n      if (!open) {\n        if ([KeyCode.ENTER, KeyCode.DOWN].indexOf(keyCode) !== -1) {\n          _this.setOpenState(true);\n        }\n      } else if (KeyCode.ESC === keyCode) {\n        _this.setOpenState(false);\n      } else if ([KeyCode.UP, KeyCode.DOWN, KeyCode.LEFT, KeyCode.RIGHT].indexOf(keyCode) !== -1) {\n        // TODO: Handle `open` state\n        event.stopPropagation();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onDeselect\", function (wrappedValue, node, nodeEventInfo) {\n      var onDeselect = _this.props.onDeselect;\n      if (!onDeselect) return;\n      onDeselect(wrappedValue, node, nodeEventInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSelectorClear\", function (event) {\n      var disabled = _this.props.disabled;\n      if (disabled) return;\n\n      _this.triggerChange([], []);\n\n      if (!_this.isSearchValueControlled()) {\n        _this.setUncontrolledState({\n          searchValue: '',\n          filteredTreeNodes: null\n        });\n      }\n\n      event.stopPropagation();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onMultipleSelectorRemove\", function (event, removeValue) {\n      event.stopPropagation();\n      var _this$state = _this.state,\n          valueList = _this$state.valueList,\n          missValueList = _this$state.missValueList,\n          valueEntities = _this$state.valueEntities;\n      var _this$props = _this.props,\n          treeCheckable = _this$props.treeCheckable,\n          treeCheckStrictly = _this$props.treeCheckStrictly,\n          treeNodeLabelProp = _this$props.treeNodeLabelProp,\n          disabled = _this$props.disabled;\n      if (disabled) return; // Find trigger entity\n\n      var triggerEntity = valueEntities[removeValue]; // Clean up value\n\n      var newValueList = valueList;\n\n      if (triggerEntity) {\n        // If value is in tree\n        if (treeCheckable && !treeCheckStrictly) {\n          newValueList = valueList.filter(function (_ref) {\n            var value = _ref.value;\n            var entity = valueEntities[value];\n            return !isPosRelated(entity.pos, triggerEntity.pos);\n          });\n        } else {\n          newValueList = valueList.filter(function (_ref2) {\n            var value = _ref2.value;\n            return value !== removeValue;\n          });\n        }\n      }\n\n      var triggerNode = triggerEntity ? triggerEntity.node : null;\n      var extraInfo = {\n        triggerValue: removeValue,\n        triggerNode: triggerNode\n      };\n      var deselectInfo = {\n        node: triggerNode\n      }; // [Legacy] Little hack on this to make same action as `onCheck` event.\n\n      if (treeCheckable) {\n        var filteredEntityList = newValueList.map(function (_ref3) {\n          var value = _ref3.value;\n          return valueEntities[value];\n        });\n        deselectInfo.event = 'check';\n        deselectInfo.checked = false;\n        deselectInfo.checkedNodes = filteredEntityList.map(function (_ref4) {\n          var node = _ref4.node;\n          return node;\n        });\n        deselectInfo.checkedNodesPositions = filteredEntityList.map(function (_ref5) {\n          var node = _ref5.node,\n              pos = _ref5.pos;\n          return {\n            node: node,\n            pos: pos\n          };\n        });\n\n        if (treeCheckStrictly) {\n          extraInfo.allCheckedNodes = deselectInfo.checkedNodes;\n        } else {\n          // TODO: It's too expansive to get `halfCheckedKeys` in onDeselect. Not pass this.\n          extraInfo.allCheckedNodes = flatToHierarchy(filteredEntityList).map(function (_ref6) {\n            var node = _ref6.node;\n            return node;\n          });\n        }\n      } else {\n        deselectInfo.event = 'select';\n        deselectInfo.selected = false;\n        deselectInfo.selectedNodes = newValueList.map(function (_ref7) {\n          var value = _ref7.value;\n          return (valueEntities[value] || {}).node;\n        });\n      } // Some value user pass prop is not in the tree, we also need clean it\n\n\n      var newMissValueList = missValueList.filter(function (_ref8) {\n        var value = _ref8.value;\n        return value !== removeValue;\n      });\n      var wrappedValue;\n\n      if (_this.isLabelInValue()) {\n        wrappedValue = {\n          label: triggerNode ? triggerNode.props[treeNodeLabelProp] : null,\n          value: removeValue\n        };\n      } else {\n        wrappedValue = removeValue;\n      }\n\n      _this.onDeselect(wrappedValue, triggerNode, deselectInfo);\n\n      _this.triggerChange(newMissValueList, newValueList, extraInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onValueTrigger\", function (isAdd, nodeList, nodeEventInfo, nodeExtraInfo) {\n      var node = nodeEventInfo.node;\n      var value = node.props.value;\n      var _this$state2 = _this.state,\n          missValueList = _this$state2.missValueList,\n          valueEntities = _this$state2.valueEntities,\n          keyEntities = _this$state2.keyEntities,\n          searchValue = _this$state2.searchValue;\n      var _this$props2 = _this.props,\n          disabled = _this$props2.disabled,\n          inputValue = _this$props2.inputValue,\n          treeNodeLabelProp = _this$props2.treeNodeLabelProp,\n          onSelect = _this$props2.onSelect,\n          onSearch = _this$props2.onSearch,\n          treeCheckable = _this$props2.treeCheckable,\n          treeCheckStrictly = _this$props2.treeCheckStrictly,\n          autoClearSearchValue = _this$props2.autoClearSearchValue;\n      var label = node.props[treeNodeLabelProp];\n      if (disabled) return; // Wrap the return value for user\n\n      var wrappedValue;\n\n      if (_this.isLabelInValue()) {\n        wrappedValue = {\n          value: value,\n          label: label\n        };\n      } else {\n        wrappedValue = value;\n      } // [Legacy] Origin code not trigger `onDeselect` every time. Let's align the behaviour.\n\n\n      if (isAdd) {\n        if (onSelect) {\n          onSelect(wrappedValue, node, nodeEventInfo);\n        }\n      } else {\n        _this.onDeselect(wrappedValue, node, nodeEventInfo);\n      } // Get wrapped value list.\n      // This is a bit hack cause we use key to match the value.\n\n\n      var newValueList = nodeList.map(function (_ref9) {\n        var props = _ref9.props;\n        return {\n          value: props.value,\n          label: props[treeNodeLabelProp]\n        };\n      }); // When is `treeCheckable` and with `searchValue`, `valueList` is not full filled.\n      // We need calculate the missing nodes.\n\n      if (treeCheckable && !treeCheckStrictly) {\n        var keyList = newValueList.map(function (_ref10) {\n          var val = _ref10.value;\n          return valueEntities[val].key;\n        });\n\n        if (isAdd) {\n          keyList = conductCheck(keyList, true, keyEntities).checkedKeys;\n        } else {\n          keyList = conductCheck([valueEntities[value].key], false, keyEntities, {\n            checkedKeys: keyList\n          }).checkedKeys;\n        }\n\n        newValueList = keyList.map(function (key) {\n          var props = keyEntities[key].node.props;\n          return {\n            value: props.value,\n            label: props[treeNodeLabelProp]\n          };\n        });\n      } // Clean up `searchValue` when this prop is set\n\n\n      if (autoClearSearchValue || inputValue === null) {\n        // Clean state `searchValue` if uncontrolled\n        if (!_this.isSearchValueControlled()) {\n          _this.setUncontrolledState({\n            searchValue: '',\n            filteredTreeNodes: null\n          });\n        } // Trigger onSearch if `searchValue` to be empty.\n        // We should also trigger onSearch with empty string here\n        // since if user use `treeExpandedKeys`, it need user have the ability to reset it.\n\n\n        if (onSearch && searchValue && searchValue.length) {\n          onSearch('');\n        }\n      } // [Legacy] Provide extra info\n\n\n      var extraInfo = _objectSpread({}, nodeExtraInfo, {\n        triggerValue: value,\n        triggerNode: node\n      });\n\n      _this.triggerChange(missValueList, newValueList, extraInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onTreeNodeSelect\", function (_, nodeEventInfo) {\n      var _this$state3 = _this.state,\n          valueList = _this$state3.valueList,\n          valueEntities = _this$state3.valueEntities;\n      var _this$props3 = _this.props,\n          treeCheckable = _this$props3.treeCheckable,\n          multiple = _this$props3.multiple;\n      if (treeCheckable) return;\n\n      if (!multiple) {\n        _this.setOpenState(false);\n      }\n\n      var isAdd = nodeEventInfo.selected;\n      var selectedValue = nodeEventInfo.node.props.value;\n      var newValueList;\n\n      if (!multiple) {\n        newValueList = [{\n          value: selectedValue\n        }];\n      } else {\n        newValueList = valueList.filter(function (_ref11) {\n          var value = _ref11.value;\n          return value !== selectedValue;\n        });\n\n        if (isAdd) {\n          newValueList.push({\n            value: selectedValue\n          });\n        }\n      }\n\n      var selectedNodes = newValueList.map(function (_ref12) {\n        var value = _ref12.value;\n        return valueEntities[value];\n      }).filter(function (entity) {\n        return entity;\n      }).map(function (_ref13) {\n        var node = _ref13.node;\n        return node;\n      });\n\n      _this.onValueTrigger(isAdd, selectedNodes, nodeEventInfo, {\n        selected: isAdd\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onTreeNodeCheck\", function (_, nodeEventInfo) {\n      var _this$state4 = _this.state,\n          searchValue = _this$state4.searchValue,\n          keyEntities = _this$state4.keyEntities,\n          valueEntities = _this$state4.valueEntities,\n          valueList = _this$state4.valueList;\n      var treeCheckStrictly = _this.props.treeCheckStrictly;\n      var checkedNodes = nodeEventInfo.checkedNodes,\n          checkedNodesPositions = nodeEventInfo.checkedNodesPositions;\n      var isAdd = nodeEventInfo.checked;\n      var extraInfo = {\n        checked: isAdd\n      };\n      var checkedNodeList = checkedNodes; // [Legacy] Check event provide `allCheckedNodes`.\n      // When `treeCheckStrictly` or internal `searchValue` is set, TreeNode will be unrelated:\n      // - Related: Show the top checked nodes and has children prop.\n      // - Unrelated: Show all the checked nodes.\n\n      if (searchValue) {\n        var oriKeyList = valueList.map(function (_ref14) {\n          var value = _ref14.value;\n          return valueEntities[value];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (_ref15) {\n          var key = _ref15.key;\n          return key;\n        });\n        var keyList;\n\n        if (isAdd) {\n          keyList = Array.from(new Set([].concat(_toConsumableArray(oriKeyList), _toConsumableArray(checkedNodeList.map(function (_ref16) {\n            var value = _ref16.props.value;\n            return valueEntities[value].key;\n          })))));\n        } else {\n          keyList = conductCheck([nodeEventInfo.node.props.eventKey], false, keyEntities, {\n            checkedKeys: oriKeyList\n          }).checkedKeys;\n        }\n\n        checkedNodeList = keyList.map(function (key) {\n          return keyEntities[key].node;\n        }); // Let's follow as not `treeCheckStrictly` format\n\n        extraInfo.allCheckedNodes = keyList.map(function (key) {\n          return cleanEntity(keyEntities[key]);\n        });\n      } else if (treeCheckStrictly) {\n        extraInfo.allCheckedNodes = nodeEventInfo.checkedNodes;\n      } else {\n        extraInfo.allCheckedNodes = flatToHierarchy(checkedNodesPositions);\n      }\n\n      _this.onValueTrigger(isAdd, checkedNodeList, nodeEventInfo, extraInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onDropdownVisibleChange\", function (open) {\n      _this.setOpenState(open, true);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSearchInputChange\", function (_ref17) {\n      var value = _ref17.target.value;\n      var _this$state5 = _this.state,\n          treeNodes = _this$state5.treeNodes,\n          valueEntities = _this$state5.valueEntities;\n      var _this$props4 = _this.props,\n          onSearch = _this$props4.onSearch,\n          filterTreeNode = _this$props4.filterTreeNode,\n          treeNodeFilterProp = _this$props4.treeNodeFilterProp;\n\n      if (onSearch) {\n        onSearch(value);\n      }\n\n      var isSet = false;\n\n      if (!_this.isSearchValueControlled()) {\n        isSet = _this.setUncontrolledState({\n          searchValue: value\n        });\n\n        _this.setOpenState(true);\n      }\n\n      if (isSet) {\n        // Do the search logic\n        var upperSearchValue = String(value).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n\n        if (filterTreeNode === false) {\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (!filterTreeNodeFn) {\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(node.props[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        _this.setState({\n          filteredTreeNodes: getFilterTree(treeNodes, value, filterTreeNodeFn, valueEntities)\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSearchInputKeyDown\", function (event) {\n      var _this$state6 = _this.state,\n          searchValue = _this$state6.searchValue,\n          valueList = _this$state6.valueList;\n      var keyCode = event.keyCode;\n\n      if (KeyCode.BACKSPACE === keyCode && _this.isMultiple() && !searchValue && valueList.length) {\n        var lastValue = valueList[valueList.length - 1].value;\n\n        _this.onMultipleSelectorRemove(event, lastValue);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onChoiceAnimationLeave\", function () {\n      _this.forcePopupAlign();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"setUncontrolledState\", function (state) {\n      var needSync = false;\n      var newState = {};\n      Object.keys(state).forEach(function (name) {\n        if (name in _this.props) return;\n        needSync = true;\n        newState[name] = state[name];\n      });\n\n      if (needSync) {\n        _this.setState(newState);\n      }\n\n      return needSync;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"setOpenState\", function (open) {\n      var byTrigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var onDropdownVisibleChange = _this.props.onDropdownVisibleChange;\n\n      if (onDropdownVisibleChange && onDropdownVisibleChange(open, {\n        documentClickClose: !open && byTrigger\n      }) === false) {\n        return;\n      }\n\n      _this.setUncontrolledState({\n        open: open\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isMultiple\", function () {\n      var _this$props5 = _this.props,\n          multiple = _this$props5.multiple,\n          treeCheckable = _this$props5.treeCheckable;\n      return !!(multiple || treeCheckable);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isLabelInValue\", function () {\n      return isLabelInValue(_this.props);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isSearchValueControlled\", function () {\n      var inputValue = _this.props.inputValue;\n      if ('searchValue' in _this.props) return true;\n      return 'inputValue' in _this.props && inputValue !== null;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"forcePopupAlign\", function () {\n      var $trigger = _this.selectTriggerRef.current;\n\n      if ($trigger) {\n        $trigger.forcePopupAlign();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"delayForcePopupAlign\", function () {\n      // Wait 2 frame to avoid dom update & dom algin in the same time\n      // https://github.com/ant-design/ant-design/issues/12031\n      raf(function () {\n        raf(_this.forcePopupAlign);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"triggerChange\", function (missValueList, valueList) {\n      var extraInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _this$state7 = _this.state,\n          valueEntities = _this$state7.valueEntities,\n          searchValue = _this$state7.searchValue,\n          prevSelectorValueList = _this$state7.selectorValueList;\n      var _this$props6 = _this.props,\n          onChange = _this$props6.onChange,\n          disabled = _this$props6.disabled,\n          treeCheckable = _this$props6.treeCheckable,\n          treeCheckStrictly = _this$props6.treeCheckStrictly;\n      if (disabled) return; // Trigger\n\n      var extra = _objectSpread({\n        // [Legacy] Always return as array contains label & value\n        preValue: prevSelectorValueList.map(function (_ref18) {\n          var label = _ref18.label,\n              value = _ref18.value;\n          return {\n            label: label,\n            value: value\n          };\n        })\n      }, extraInfo); // Format value by `treeCheckStrictly`\n\n\n      var selectorValueList = formatSelectorValue(valueList, _this.props, valueEntities);\n\n      if (!('value' in _this.props)) {\n        var newState = {\n          missValueList: missValueList,\n          valueList: valueList,\n          selectorValueList: selectorValueList\n        };\n\n        if (searchValue && treeCheckable && !treeCheckStrictly) {\n          newState.searchHalfCheckedKeys = getHalfCheckedKeys(valueList, valueEntities);\n        }\n\n        _this.setState(newState);\n      } // Only do the logic when `onChange` function provided\n\n\n      if (onChange) {\n        var connectValueList; // Get value by mode\n\n        if (_this.isMultiple()) {\n          connectValueList = [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList));\n        } else {\n          connectValueList = selectorValueList.slice(0, 1);\n        }\n\n        var labelList = null;\n        var returnValue;\n\n        if (_this.isLabelInValue()) {\n          returnValue = connectValueList.map(function (_ref19) {\n            var label = _ref19.label,\n                value = _ref19.value;\n            return {\n              label: label,\n              value: value\n            };\n          });\n        } else {\n          labelList = [];\n          returnValue = connectValueList.map(function (_ref20) {\n            var label = _ref20.label,\n                value = _ref20.value;\n            labelList.push(label);\n            return value;\n          });\n        }\n\n        if (!_this.isMultiple()) {\n          returnValue = returnValue[0];\n        }\n\n        onChange(returnValue, labelList, extra);\n      }\n    });\n\n    var prefixAria = _props.prefixAria,\n        defaultOpen = _props.defaultOpen,\n        _open = _props.open;\n    _this.state = {\n      open: _open || defaultOpen,\n      valueList: [],\n      searchHalfCheckedKeys: [],\n      missValueList: [],\n      // Contains the value not in the tree\n      selectorValueList: [],\n      // Used for multiple selector\n      valueEntities: {},\n      keyEntities: {},\n      searchValue: '',\n      init: true\n    };\n    _this.selectorRef = createRef();\n    _this.selectTriggerRef = createRef(); // ARIA need `aria-controls` props mapping\n    // Since this need user input. Let's generate ourselves\n\n    _this.ariaId = generateAriaId(\"\".concat(prefixAria, \"-list\"));\n    return _this;\n  }\n\n  _createClass(Select, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        rcTreeSelect: {\n          onSelectorFocus: this.onSelectorFocus,\n          onSelectorBlur: this.onSelectorBlur,\n          onSelectorKeyDown: this.onComponentKeyDown,\n          onSelectorClear: this.onSelectorClear,\n          onMultipleSelectorRemove: this.onMultipleSelectorRemove,\n          onTreeNodeSelect: this.onTreeNodeSelect,\n          onTreeNodeCheck: this.onTreeNodeCheck,\n          onPopupKeyDown: this.onComponentKeyDown,\n          onSearchInputChange: this.onSearchInputChange,\n          onSearchInputKeyDown: this.onSearchInputKeyDown\n        }\n      };\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props7 = this.props,\n          autoFocus = _this$props7.autoFocus,\n          disabled = _this$props7.disabled;\n\n      if (autoFocus && !disabled) {\n        this.focus();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_, prevState) {\n      var valueList = this.state.valueList;\n\n      if (prevState.valueList !== valueList) {\n        this.forcePopupAlign();\n      }\n    } // ==================== Selector ====================\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.selectorRef.current.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.selectorRef.current.blur();\n    } // ===================== Render =====================\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state8 = this.state,\n          valueList = _this$state8.valueList,\n          missValueList = _this$state8.missValueList,\n          selectorValueList = _this$state8.selectorValueList,\n          searchHalfCheckedKeys = _this$state8.searchHalfCheckedKeys,\n          valueEntities = _this$state8.valueEntities,\n          keyEntities = _this$state8.keyEntities,\n          searchValue = _this$state8.searchValue,\n          open = _this$state8.open,\n          focused = _this$state8.focused,\n          treeNodes = _this$state8.treeNodes,\n          filteredTreeNodes = _this$state8.filteredTreeNodes;\n      var _this$props8 = this.props,\n          prefixCls = _this$props8.prefixCls,\n          treeExpandedKeys = _this$props8.treeExpandedKeys,\n          onTreeExpand = _this$props8.onTreeExpand;\n      var isMultiple = this.isMultiple();\n\n      var passProps = _objectSpread({}, this.props, {\n        isMultiple: isMultiple,\n        valueList: valueList,\n        searchHalfCheckedKeys: searchHalfCheckedKeys,\n        selectorValueList: [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList)),\n        valueEntities: valueEntities,\n        keyEntities: keyEntities,\n        searchValue: searchValue,\n        upperSearchValue: (searchValue || '').toUpperCase(),\n        // Perf save\n        open: open,\n        focused: focused,\n        onChoiceAnimationLeave: this.onChoiceAnimationLeave,\n        dropdownPrefixCls: \"\".concat(prefixCls, \"-dropdown\"),\n        ariaId: this.ariaId\n      });\n\n      var Popup = isMultiple ? MultiplePopup : SinglePopup;\n      var $popup = React.createElement(Popup, _extends({}, passProps, {\n        onTreeExpanded: this.delayForcePopupAlign,\n        treeNodes: treeNodes,\n        filteredTreeNodes: filteredTreeNodes // Tree expanded control\n        ,\n        treeExpandedKeys: treeExpandedKeys,\n        onTreeExpand: onTreeExpand\n      }));\n      var Selector = isMultiple ? MultipleSelector : SingleSelector;\n      var $selector = React.createElement(Selector, _extends({}, passProps, {\n        ref: this.selectorRef\n      }));\n      return React.createElement(SelectTrigger, _extends({}, passProps, {\n        ref: this.selectTriggerRef,\n        popupElement: $popup,\n        onKeyDown: this.onKeyDown,\n        onDropdownVisibleChange: this.onDropdownVisibleChange\n      }), $selector);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _prevState$prevProps = prevState.prevProps,\n          prevProps = _prevState$prevProps === void 0 ? {} : _prevState$prevProps;\n      var treeCheckable = nextProps.treeCheckable,\n          treeCheckStrictly = nextProps.treeCheckStrictly,\n          filterTreeNode = nextProps.filterTreeNode,\n          treeNodeFilterProp = nextProps.treeNodeFilterProp,\n          treeDataSimpleMode = nextProps.treeDataSimpleMode;\n      var newState = {\n        prevProps: nextProps,\n        init: false\n      }; // Process the state when props updated\n\n      function processState(propName, updater) {\n        if (prevProps[propName] !== nextProps[propName]) {\n          updater(nextProps[propName], prevProps[propName]);\n          return true;\n        }\n\n        return false;\n      }\n\n      var valueRefresh = false; // Open\n\n      processState('open', function (propValue) {\n        newState.open = propValue;\n      }); // Tree Nodes\n\n      var treeNodes;\n      var treeDataChanged = false;\n      var treeDataModeChanged = false;\n      processState('treeData', function (propValue) {\n        treeNodes = convertDataToTree(propValue);\n        treeDataChanged = true;\n      });\n      processState('treeDataSimpleMode', function (propValue, prevValue) {\n        if (!propValue) return;\n        var prev = !prevValue || prevValue === true ? {} : prevValue; // Shallow equal to avoid dynamic prop object\n\n        if (!shallowEqual(propValue, prev)) {\n          treeDataModeChanged = true;\n        }\n      }); // Parse by `treeDataSimpleMode`\n\n      if (treeDataSimpleMode && (treeDataChanged || treeDataModeChanged)) {\n        var simpleMapper = _objectSpread({\n          id: 'id',\n          pId: 'pId',\n          rootPId: null\n        }, treeDataSimpleMode !== true ? treeDataSimpleMode : {});\n\n        treeNodes = convertDataToTree(parseSimpleTreeData(nextProps.treeData, simpleMapper));\n      } // If `treeData` not provide, use children TreeNodes\n\n\n      if (!nextProps.treeData) {\n        processState('children', function (propValue) {\n          treeNodes = Array.isArray(propValue) ? propValue : [propValue];\n        });\n      } // Convert `treeData` to entities\n\n\n      if (treeNodes) {\n        var entitiesMap = convertTreeToEntities(treeNodes);\n        newState.treeNodes = treeNodes;\n        newState.posEntities = entitiesMap.posEntities;\n        newState.valueEntities = entitiesMap.valueEntities;\n        newState.keyEntities = entitiesMap.keyEntities;\n        valueRefresh = true;\n      } // Value List\n\n\n      if (prevState.init) {\n        processState('defaultValue', function (propValue) {\n          newState.valueList = formatInternalValue(propValue, nextProps);\n          valueRefresh = true;\n        });\n      }\n\n      processState('value', function (propValue) {\n        newState.valueList = formatInternalValue(propValue, nextProps);\n        valueRefresh = true;\n      }); // Selector Value List\n\n      if (valueRefresh) {\n        // Find out that value not exist in the tree\n        var missValueList = [];\n        var filteredValueList = [];\n        var keyList = []; // Get latest value list\n\n        var latestValueList = newState.valueList;\n\n        if (!latestValueList) {\n          // Also need add prev missValueList to avoid new treeNodes contains the value\n          latestValueList = [].concat(_toConsumableArray(prevState.valueList), _toConsumableArray(prevState.missValueList));\n        } // Get key by value\n\n\n        latestValueList.forEach(function (wrapperValue) {\n          var value = wrapperValue.value;\n          var entity = (newState.valueEntities || prevState.valueEntities)[value];\n\n          if (entity) {\n            keyList.push(entity.key);\n            filteredValueList.push(wrapperValue);\n            return;\n          } // If not match, it may caused by ajax load. We need keep this\n\n\n          missValueList.push(wrapperValue);\n        }); // We need calculate the value when tree is checked tree\n\n        if (treeCheckable && !treeCheckStrictly) {\n          // Calculate the keys need to be checked\n          var _conductCheck = conductCheck(keyList, true, newState.keyEntities || prevState.keyEntities),\n              checkedKeys = _conductCheck.checkedKeys; // Format value list again for internal usage\n\n\n          newState.valueList = checkedKeys.map(function (key) {\n            return {\n              value: (newState.keyEntities || prevState.keyEntities)[key].value\n            };\n          });\n        } else {\n          newState.valueList = filteredValueList;\n        } // Fill the missValueList, we still need display in the selector\n\n\n        newState.missValueList = missValueList; // Calculate the value list for `Selector` usage\n\n        newState.selectorValueList = formatSelectorValue(newState.valueList, nextProps, newState.valueEntities || prevState.valueEntities);\n      } // [Legacy] To align with `Select` component,\n      // We use `searchValue` instead of `inputValue` but still keep the api\n      // `inputValue` support `null` to work as `autoClearSearchValue`\n\n\n      processState('inputValue', function (propValue) {\n        if (propValue !== null) {\n          newState.searchValue = propValue;\n        }\n      }); // Search value\n\n      processState('searchValue', function (propValue) {\n        newState.searchValue = propValue;\n      }); // Do the search logic\n\n      if (newState.searchValue !== undefined || prevState.searchValue && treeNodes) {\n        var searchValue = newState.searchValue !== undefined ? newState.searchValue : prevState.searchValue;\n        var upperSearchValue = String(searchValue).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n\n        if (filterTreeNode === false) {\n          // Don't filter if is false\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (typeof filterTreeNodeFn !== 'function') {\n          // When is not function (true or undefined), use inner filter\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(node.props[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        newState.filteredTreeNodes = getFilterTree(newState.treeNodes || prevState.treeNodes, searchValue, filterTreeNodeFn, newState.valueEntities || prevState.valueEntities);\n      } // We should re-calculate the halfCheckedKeys when in search mode\n\n\n      if (valueRefresh && treeCheckable && !treeCheckStrictly && (newState.searchValue || prevState.searchValue)) {\n        newState.searchHalfCheckedKeys = getHalfCheckedKeys(newState.valueList, newState.valueEntities || prevState.valueEntities);\n      } // Checked Strategy\n\n\n      processState('showCheckedStrategy', function () {\n        newState.selectorValueList = newState.selectorValueList || formatSelectorValue(newState.valueList || prevState.valueList, nextProps, newState.valueEntities || prevState.valueEntities);\n      });\n      return newState;\n    }\n  }]);\n\n  return Select;\n}(React.Component);\n\n_defineProperty(Select, \"propTypes\", {\n  prefixCls: PropTypes.string,\n  prefixAria: PropTypes.string,\n  multiple: PropTypes.bool,\n  showArrow: PropTypes.bool,\n  open: PropTypes.bool,\n  value: valueProp,\n  autoFocus: PropTypes.bool,\n  defaultOpen: PropTypes.bool,\n  defaultValue: valueProp,\n  showSearch: PropTypes.bool,\n  placeholder: PropTypes.node,\n  inputValue: PropTypes.string,\n  // [Legacy] Deprecated. Use `searchValue` instead.\n  searchValue: PropTypes.string,\n  autoClearSearchValue: PropTypes.bool,\n  searchPlaceholder: PropTypes.node,\n  // [Legacy] Confuse with placeholder\n  disabled: PropTypes.bool,\n  children: PropTypes.node,\n  labelInValue: PropTypes.bool,\n  maxTagCount: PropTypes.number,\n  maxTagPlaceholder: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  maxTagTextLength: PropTypes.number,\n  showCheckedStrategy: PropTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),\n  dropdownMatchSelectWidth: PropTypes.bool,\n  treeData: PropTypes.array,\n  treeDataSimpleMode: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  treeNodeFilterProp: PropTypes.string,\n  treeNodeLabelProp: PropTypes.string,\n  treeCheckable: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n  treeCheckStrictly: PropTypes.bool,\n  treeIcon: PropTypes.bool,\n  treeLine: PropTypes.bool,\n  treeDefaultExpandAll: PropTypes.bool,\n  treeDefaultExpandedKeys: PropTypes.array,\n  treeExpandedKeys: PropTypes.array,\n  loadData: PropTypes.func,\n  filterTreeNode: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  notFoundContent: PropTypes.node,\n  onSearch: PropTypes.func,\n  onSelect: PropTypes.func,\n  onDeselect: PropTypes.func,\n  onChange: PropTypes.func,\n  onDropdownVisibleChange: PropTypes.func,\n  onTreeExpand: PropTypes.func,\n  inputIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  clearIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  removeIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  switcherIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func])\n});\n\n_defineProperty(Select, \"childContextTypes\", {\n  rcTreeSelect: PropTypes.shape(_objectSpread({}, selectorContextTypes, multipleSelectorContextTypes, popupContextTypes, {\n    onSearchInputChange: PropTypes.func,\n    onSearchInputKeyDown: PropTypes.func\n  }))\n});\n\n_defineProperty(Select, \"defaultProps\", {\n  prefixCls: 'rc-tree-select',\n  prefixAria: 'rc-tree-select',\n  showArrow: true,\n  showSearch: true,\n  autoClearSearchValue: true,\n  showCheckedStrategy: SHOW_CHILD,\n  // dropdownMatchSelectWidth change the origin design, set to false now\n  // ref: https://github.com/react-component/select/blob/4cad95e098a341a09de239ad6981067188842020/src/Select.jsx#L344\n  // ref: https://github.com/react-component/select/pull/71\n  treeNodeFilterProp: 'value',\n  treeNodeLabelProp: 'title',\n  treeIcon: false,\n  notFoundContent: 'Not Found'\n});\n\nSelect.TreeNode = SelectNode;\nSelect.SHOW_ALL = SHOW_ALL;\nSelect.SHOW_PARENT = SHOW_PARENT;\nSelect.SHOW_CHILD = SHOW_CHILD; // Let warning show correct component name\n\nSelect.displayName = 'TreeSelect';\npolyfill(Select);\nexport default Select;",{"version":3,"sources":["C:\\Users\\liuli\\source\\repos\\github\\WalkingTec.Mvvm\\WebApplication2\\ClientApp\\node_modules\\rc-tree-select\\es\\Select.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","toString","Array","from","isArray","arr2","_objectSpread","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","_defineProperty","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","configurable","writable","defineProperty","_createClass","protoProps","staticProps","_possibleConstructorReturn","self","_assertThisInitialized","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","constructor","value","_setPrototypeOf","p","ReferenceError","obj","React","PropTypes","polyfill","KeyCode","shallowEqual","raf","SelectTrigger","selectorContextTypes","popupContextTypes","SingleSelector","MultipleSelector","multipleSelectorContextTypes","SinglePopup","MultiplePopup","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","createRef","generateAriaId","formatInternalValue","formatSelectorValue","parseSimpleTreeData","convertDataToTree","convertTreeToEntities","conductCheck","getHalfCheckedKeys","flatToHierarchy","isPosRelated","isLabelInValue","getFilterTree","cleanEntity","valueProp","SelectNode","Select","_React$Component","_props","_this","setState","focused","event","open","state","keyCode","ENTER","DOWN","indexOf","setOpenState","ESC","UP","LEFT","RIGHT","stopPropagation","wrappedValue","node","nodeEventInfo","onDeselect","disabled","triggerChange","isSearchValueControlled","setUncontrolledState","searchValue","filteredTreeNodes","removeValue","_this$state","valueList","missValueList","valueEntities","_this$props","treeCheckable","treeCheckStrictly","treeNodeLabelProp","triggerEntity","newValueList","_ref","entity","pos","_ref2","triggerNode","extraInfo","triggerValue","deselectInfo","filteredEntityList","map","_ref3","checked","checkedNodes","_ref4","checkedNodesPositions","_ref5","allCheckedNodes","_ref6","selected","selectedNodes","_ref7","newMissValueList","_ref8","label","isAdd","nodeList","nodeExtraInfo","_this$state2","keyEntities","_this$props2","inputValue","onSelect","onSearch","autoClearSearchValue","_ref9","keyList","_ref10","val","checkedKeys","_","_this$state3","_this$props3","multiple","selectedValue","_ref11","push","_ref12","_ref13","onValueTrigger","_this$state4","checkedNodeList","oriKeyList","_ref14","_ref15","Set","_ref16","eventKey","_ref17","_this$state5","treeNodes","_this$props4","filterTreeNode","treeNodeFilterProp","isSet","upperSearchValue","String","toUpperCase","filterTreeNodeFn","nodeValue","_this$state6","BACKSPACE","isMultiple","lastValue","onMultipleSelectorRemove","forcePopupAlign","needSync","newState","name","byTrigger","undefined","onDropdownVisibleChange","documentClickClose","_this$props5","$trigger","selectTriggerRef","current","_this$state7","prevSelectorValueList","selectorValueList","_this$props6","onChange","extra","preValue","_ref18","searchHalfCheckedKeys","connectValueList","slice","labelList","returnValue","_ref19","_ref20","prefixAria","defaultOpen","_open","init","selectorRef","ariaId","getChildContext","rcTreeSelect","onSelectorFocus","onSelectorBlur","onSelectorKeyDown","onComponentKeyDown","onSelectorClear","onTreeNodeSelect","onTreeNodeCheck","onPopupKeyDown","onSearchInputChange","onSearchInputKeyDown","componentDidMount","_this$props7","autoFocus","focus","componentDidUpdate","prevState","blur","render","_this$state8","_this$props8","prefixCls","treeExpandedKeys","onTreeExpand","passProps","onChoiceAnimationLeave","dropdownPrefixCls","Popup","$popup","createElement","onTreeExpanded","delayForcePopupAlign","Selector","$selector","ref","popupElement","onKeyDown","getDerivedStateFromProps","nextProps","_prevState$prevProps","prevProps","treeDataSimpleMode","processState","propName","updater","valueRefresh","propValue","treeDataChanged","treeDataModeChanged","prevValue","prev","simpleMapper","id","pId","rootPId","treeData","entitiesMap","posEntities","filteredValueList","latestValueList","wrapperValue","_conductCheck","Component","string","bool","showArrow","defaultValue","showSearch","placeholder","searchPlaceholder","children","labelInValue","maxTagCount","number","maxTagPlaceholder","oneOfType","func","maxTagTextLength","showCheckedStrategy","oneOf","dropdownMatchSelectWidth","array","object","treeIcon","treeLine","treeDefaultExpandAll","treeDefaultExpandedKeys","loadData","notFoundContent","inputIcon","clearIcon","removeIcon","switcherIcon","shape","TreeNode","displayName"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * ARIA: https://www.w3.org/TR/wai-aria/#combobox\n * Sample 1: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/combobox/aria1.1pattern/listbox-combo.html\n * Sample 2: https://www.w3.org/blog/wai-components-gallery/widget/combobox-with-aria-autocompleteinline/\n *\n * Tab logic:\n * Popup is close\n * 1. Focus input (mark component as focused)\n * 2. Press enter to show the popup\n * 3. If popup has input, focus it\n *\n * Popup is open\n * 1. press tab to close the popup\n * 2. Focus back to the selection input box\n * 3. Let the native tab going on\n *\n * TreeSelect use 2 design type.\n * In single mode, we should focus on the `span`\n * In multiple mode, we should focus on the `input`\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { polyfill } from 'react-lifecycles-compat';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport shallowEqual from 'shallowequal';\nimport raf from 'raf';\nimport SelectTrigger from './SelectTrigger';\nimport { selectorContextTypes } from './Base/BaseSelector';\nimport { popupContextTypes } from './Base/BasePopup';\nimport SingleSelector from './Selector/SingleSelector';\nimport MultipleSelector, { multipleSelectorContextTypes } from './Selector/MultipleSelector';\nimport SinglePopup from './Popup/SinglePopup';\nimport MultiplePopup from './Popup/MultiplePopup';\nimport { SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './strategies';\nimport { createRef, generateAriaId, formatInternalValue, formatSelectorValue, parseSimpleTreeData, convertDataToTree, convertTreeToEntities, conductCheck, getHalfCheckedKeys, flatToHierarchy, isPosRelated, isLabelInValue, getFilterTree, cleanEntity } from './util';\nimport { valueProp } from './propTypes';\nimport SelectNode from './SelectNode';\n\nvar Select =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Select, _React$Component);\n\n  function Select(_props) {\n    var _this;\n\n    _classCallCheck(this, Select);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Select).call(this, _props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSelectorFocus\", function () {\n      _this.setState({\n        focused: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSelectorBlur\", function () {\n      _this.setState({\n        focused: false\n      }); // TODO: Close when Popup is also not focused\n      // this.setState({ open: false });\n\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onComponentKeyDown\", function (event) {\n      var open = _this.state.open;\n      var keyCode = event.keyCode;\n\n      if (!open) {\n        if ([KeyCode.ENTER, KeyCode.DOWN].indexOf(keyCode) !== -1) {\n          _this.setOpenState(true);\n        }\n      } else if (KeyCode.ESC === keyCode) {\n        _this.setOpenState(false);\n      } else if ([KeyCode.UP, KeyCode.DOWN, KeyCode.LEFT, KeyCode.RIGHT].indexOf(keyCode) !== -1) {\n        // TODO: Handle `open` state\n        event.stopPropagation();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onDeselect\", function (wrappedValue, node, nodeEventInfo) {\n      var onDeselect = _this.props.onDeselect;\n      if (!onDeselect) return;\n      onDeselect(wrappedValue, node, nodeEventInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSelectorClear\", function (event) {\n      var disabled = _this.props.disabled;\n      if (disabled) return;\n\n      _this.triggerChange([], []);\n\n      if (!_this.isSearchValueControlled()) {\n        _this.setUncontrolledState({\n          searchValue: '',\n          filteredTreeNodes: null\n        });\n      }\n\n      event.stopPropagation();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onMultipleSelectorRemove\", function (event, removeValue) {\n      event.stopPropagation();\n      var _this$state = _this.state,\n          valueList = _this$state.valueList,\n          missValueList = _this$state.missValueList,\n          valueEntities = _this$state.valueEntities;\n      var _this$props = _this.props,\n          treeCheckable = _this$props.treeCheckable,\n          treeCheckStrictly = _this$props.treeCheckStrictly,\n          treeNodeLabelProp = _this$props.treeNodeLabelProp,\n          disabled = _this$props.disabled;\n      if (disabled) return; // Find trigger entity\n\n      var triggerEntity = valueEntities[removeValue]; // Clean up value\n\n      var newValueList = valueList;\n\n      if (triggerEntity) {\n        // If value is in tree\n        if (treeCheckable && !treeCheckStrictly) {\n          newValueList = valueList.filter(function (_ref) {\n            var value = _ref.value;\n            var entity = valueEntities[value];\n            return !isPosRelated(entity.pos, triggerEntity.pos);\n          });\n        } else {\n          newValueList = valueList.filter(function (_ref2) {\n            var value = _ref2.value;\n            return value !== removeValue;\n          });\n        }\n      }\n\n      var triggerNode = triggerEntity ? triggerEntity.node : null;\n      var extraInfo = {\n        triggerValue: removeValue,\n        triggerNode: triggerNode\n      };\n      var deselectInfo = {\n        node: triggerNode\n      }; // [Legacy] Little hack on this to make same action as `onCheck` event.\n\n      if (treeCheckable) {\n        var filteredEntityList = newValueList.map(function (_ref3) {\n          var value = _ref3.value;\n          return valueEntities[value];\n        });\n        deselectInfo.event = 'check';\n        deselectInfo.checked = false;\n        deselectInfo.checkedNodes = filteredEntityList.map(function (_ref4) {\n          var node = _ref4.node;\n          return node;\n        });\n        deselectInfo.checkedNodesPositions = filteredEntityList.map(function (_ref5) {\n          var node = _ref5.node,\n              pos = _ref5.pos;\n          return {\n            node: node,\n            pos: pos\n          };\n        });\n\n        if (treeCheckStrictly) {\n          extraInfo.allCheckedNodes = deselectInfo.checkedNodes;\n        } else {\n          // TODO: It's too expansive to get `halfCheckedKeys` in onDeselect. Not pass this.\n          extraInfo.allCheckedNodes = flatToHierarchy(filteredEntityList).map(function (_ref6) {\n            var node = _ref6.node;\n            return node;\n          });\n        }\n      } else {\n        deselectInfo.event = 'select';\n        deselectInfo.selected = false;\n        deselectInfo.selectedNodes = newValueList.map(function (_ref7) {\n          var value = _ref7.value;\n          return (valueEntities[value] || {}).node;\n        });\n      } // Some value user pass prop is not in the tree, we also need clean it\n\n\n      var newMissValueList = missValueList.filter(function (_ref8) {\n        var value = _ref8.value;\n        return value !== removeValue;\n      });\n      var wrappedValue;\n\n      if (_this.isLabelInValue()) {\n        wrappedValue = {\n          label: triggerNode ? triggerNode.props[treeNodeLabelProp] : null,\n          value: removeValue\n        };\n      } else {\n        wrappedValue = removeValue;\n      }\n\n      _this.onDeselect(wrappedValue, triggerNode, deselectInfo);\n\n      _this.triggerChange(newMissValueList, newValueList, extraInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onValueTrigger\", function (isAdd, nodeList, nodeEventInfo, nodeExtraInfo) {\n      var node = nodeEventInfo.node;\n      var value = node.props.value;\n      var _this$state2 = _this.state,\n          missValueList = _this$state2.missValueList,\n          valueEntities = _this$state2.valueEntities,\n          keyEntities = _this$state2.keyEntities,\n          searchValue = _this$state2.searchValue;\n      var _this$props2 = _this.props,\n          disabled = _this$props2.disabled,\n          inputValue = _this$props2.inputValue,\n          treeNodeLabelProp = _this$props2.treeNodeLabelProp,\n          onSelect = _this$props2.onSelect,\n          onSearch = _this$props2.onSearch,\n          treeCheckable = _this$props2.treeCheckable,\n          treeCheckStrictly = _this$props2.treeCheckStrictly,\n          autoClearSearchValue = _this$props2.autoClearSearchValue;\n      var label = node.props[treeNodeLabelProp];\n      if (disabled) return; // Wrap the return value for user\n\n      var wrappedValue;\n\n      if (_this.isLabelInValue()) {\n        wrappedValue = {\n          value: value,\n          label: label\n        };\n      } else {\n        wrappedValue = value;\n      } // [Legacy] Origin code not trigger `onDeselect` every time. Let's align the behaviour.\n\n\n      if (isAdd) {\n        if (onSelect) {\n          onSelect(wrappedValue, node, nodeEventInfo);\n        }\n      } else {\n        _this.onDeselect(wrappedValue, node, nodeEventInfo);\n      } // Get wrapped value list.\n      // This is a bit hack cause we use key to match the value.\n\n\n      var newValueList = nodeList.map(function (_ref9) {\n        var props = _ref9.props;\n        return {\n          value: props.value,\n          label: props[treeNodeLabelProp]\n        };\n      }); // When is `treeCheckable` and with `searchValue`, `valueList` is not full filled.\n      // We need calculate the missing nodes.\n\n      if (treeCheckable && !treeCheckStrictly) {\n        var keyList = newValueList.map(function (_ref10) {\n          var val = _ref10.value;\n          return valueEntities[val].key;\n        });\n\n        if (isAdd) {\n          keyList = conductCheck(keyList, true, keyEntities).checkedKeys;\n        } else {\n          keyList = conductCheck([valueEntities[value].key], false, keyEntities, {\n            checkedKeys: keyList\n          }).checkedKeys;\n        }\n\n        newValueList = keyList.map(function (key) {\n          var props = keyEntities[key].node.props;\n          return {\n            value: props.value,\n            label: props[treeNodeLabelProp]\n          };\n        });\n      } // Clean up `searchValue` when this prop is set\n\n\n      if (autoClearSearchValue || inputValue === null) {\n        // Clean state `searchValue` if uncontrolled\n        if (!_this.isSearchValueControlled()) {\n          _this.setUncontrolledState({\n            searchValue: '',\n            filteredTreeNodes: null\n          });\n        } // Trigger onSearch if `searchValue` to be empty.\n        // We should also trigger onSearch with empty string here\n        // since if user use `treeExpandedKeys`, it need user have the ability to reset it.\n\n\n        if (onSearch && searchValue && searchValue.length) {\n          onSearch('');\n        }\n      } // [Legacy] Provide extra info\n\n\n      var extraInfo = _objectSpread({}, nodeExtraInfo, {\n        triggerValue: value,\n        triggerNode: node\n      });\n\n      _this.triggerChange(missValueList, newValueList, extraInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onTreeNodeSelect\", function (_, nodeEventInfo) {\n      var _this$state3 = _this.state,\n          valueList = _this$state3.valueList,\n          valueEntities = _this$state3.valueEntities;\n      var _this$props3 = _this.props,\n          treeCheckable = _this$props3.treeCheckable,\n          multiple = _this$props3.multiple;\n      if (treeCheckable) return;\n\n      if (!multiple) {\n        _this.setOpenState(false);\n      }\n\n      var isAdd = nodeEventInfo.selected;\n      var selectedValue = nodeEventInfo.node.props.value;\n      var newValueList;\n\n      if (!multiple) {\n        newValueList = [{\n          value: selectedValue\n        }];\n      } else {\n        newValueList = valueList.filter(function (_ref11) {\n          var value = _ref11.value;\n          return value !== selectedValue;\n        });\n\n        if (isAdd) {\n          newValueList.push({\n            value: selectedValue\n          });\n        }\n      }\n\n      var selectedNodes = newValueList.map(function (_ref12) {\n        var value = _ref12.value;\n        return valueEntities[value];\n      }).filter(function (entity) {\n        return entity;\n      }).map(function (_ref13) {\n        var node = _ref13.node;\n        return node;\n      });\n\n      _this.onValueTrigger(isAdd, selectedNodes, nodeEventInfo, {\n        selected: isAdd\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onTreeNodeCheck\", function (_, nodeEventInfo) {\n      var _this$state4 = _this.state,\n          searchValue = _this$state4.searchValue,\n          keyEntities = _this$state4.keyEntities,\n          valueEntities = _this$state4.valueEntities,\n          valueList = _this$state4.valueList;\n      var treeCheckStrictly = _this.props.treeCheckStrictly;\n      var checkedNodes = nodeEventInfo.checkedNodes,\n          checkedNodesPositions = nodeEventInfo.checkedNodesPositions;\n      var isAdd = nodeEventInfo.checked;\n      var extraInfo = {\n        checked: isAdd\n      };\n      var checkedNodeList = checkedNodes; // [Legacy] Check event provide `allCheckedNodes`.\n      // When `treeCheckStrictly` or internal `searchValue` is set, TreeNode will be unrelated:\n      // - Related: Show the top checked nodes and has children prop.\n      // - Unrelated: Show all the checked nodes.\n\n      if (searchValue) {\n        var oriKeyList = valueList.map(function (_ref14) {\n          var value = _ref14.value;\n          return valueEntities[value];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (_ref15) {\n          var key = _ref15.key;\n          return key;\n        });\n        var keyList;\n\n        if (isAdd) {\n          keyList = Array.from(new Set([].concat(_toConsumableArray(oriKeyList), _toConsumableArray(checkedNodeList.map(function (_ref16) {\n            var value = _ref16.props.value;\n            return valueEntities[value].key;\n          })))));\n        } else {\n          keyList = conductCheck([nodeEventInfo.node.props.eventKey], false, keyEntities, {\n            checkedKeys: oriKeyList\n          }).checkedKeys;\n        }\n\n        checkedNodeList = keyList.map(function (key) {\n          return keyEntities[key].node;\n        }); // Let's follow as not `treeCheckStrictly` format\n\n        extraInfo.allCheckedNodes = keyList.map(function (key) {\n          return cleanEntity(keyEntities[key]);\n        });\n      } else if (treeCheckStrictly) {\n        extraInfo.allCheckedNodes = nodeEventInfo.checkedNodes;\n      } else {\n        extraInfo.allCheckedNodes = flatToHierarchy(checkedNodesPositions);\n      }\n\n      _this.onValueTrigger(isAdd, checkedNodeList, nodeEventInfo, extraInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onDropdownVisibleChange\", function (open) {\n      _this.setOpenState(open, true);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSearchInputChange\", function (_ref17) {\n      var value = _ref17.target.value;\n      var _this$state5 = _this.state,\n          treeNodes = _this$state5.treeNodes,\n          valueEntities = _this$state5.valueEntities;\n      var _this$props4 = _this.props,\n          onSearch = _this$props4.onSearch,\n          filterTreeNode = _this$props4.filterTreeNode,\n          treeNodeFilterProp = _this$props4.treeNodeFilterProp;\n\n      if (onSearch) {\n        onSearch(value);\n      }\n\n      var isSet = false;\n\n      if (!_this.isSearchValueControlled()) {\n        isSet = _this.setUncontrolledState({\n          searchValue: value\n        });\n\n        _this.setOpenState(true);\n      }\n\n      if (isSet) {\n        // Do the search logic\n        var upperSearchValue = String(value).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n\n        if (filterTreeNode === false) {\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (!filterTreeNodeFn) {\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(node.props[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        _this.setState({\n          filteredTreeNodes: getFilterTree(treeNodes, value, filterTreeNodeFn, valueEntities)\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSearchInputKeyDown\", function (event) {\n      var _this$state6 = _this.state,\n          searchValue = _this$state6.searchValue,\n          valueList = _this$state6.valueList;\n      var keyCode = event.keyCode;\n\n      if (KeyCode.BACKSPACE === keyCode && _this.isMultiple() && !searchValue && valueList.length) {\n        var lastValue = valueList[valueList.length - 1].value;\n\n        _this.onMultipleSelectorRemove(event, lastValue);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onChoiceAnimationLeave\", function () {\n      _this.forcePopupAlign();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"setUncontrolledState\", function (state) {\n      var needSync = false;\n      var newState = {};\n      Object.keys(state).forEach(function (name) {\n        if (name in _this.props) return;\n        needSync = true;\n        newState[name] = state[name];\n      });\n\n      if (needSync) {\n        _this.setState(newState);\n      }\n\n      return needSync;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"setOpenState\", function (open) {\n      var byTrigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var onDropdownVisibleChange = _this.props.onDropdownVisibleChange;\n\n      if (onDropdownVisibleChange && onDropdownVisibleChange(open, {\n        documentClickClose: !open && byTrigger\n      }) === false) {\n        return;\n      }\n\n      _this.setUncontrolledState({\n        open: open\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isMultiple\", function () {\n      var _this$props5 = _this.props,\n          multiple = _this$props5.multiple,\n          treeCheckable = _this$props5.treeCheckable;\n      return !!(multiple || treeCheckable);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isLabelInValue\", function () {\n      return isLabelInValue(_this.props);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isSearchValueControlled\", function () {\n      var inputValue = _this.props.inputValue;\n      if ('searchValue' in _this.props) return true;\n      return 'inputValue' in _this.props && inputValue !== null;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"forcePopupAlign\", function () {\n      var $trigger = _this.selectTriggerRef.current;\n\n      if ($trigger) {\n        $trigger.forcePopupAlign();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"delayForcePopupAlign\", function () {\n      // Wait 2 frame to avoid dom update & dom algin in the same time\n      // https://github.com/ant-design/ant-design/issues/12031\n      raf(function () {\n        raf(_this.forcePopupAlign);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"triggerChange\", function (missValueList, valueList) {\n      var extraInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _this$state7 = _this.state,\n          valueEntities = _this$state7.valueEntities,\n          searchValue = _this$state7.searchValue,\n          prevSelectorValueList = _this$state7.selectorValueList;\n      var _this$props6 = _this.props,\n          onChange = _this$props6.onChange,\n          disabled = _this$props6.disabled,\n          treeCheckable = _this$props6.treeCheckable,\n          treeCheckStrictly = _this$props6.treeCheckStrictly;\n      if (disabled) return; // Trigger\n\n      var extra = _objectSpread({\n        // [Legacy] Always return as array contains label & value\n        preValue: prevSelectorValueList.map(function (_ref18) {\n          var label = _ref18.label,\n              value = _ref18.value;\n          return {\n            label: label,\n            value: value\n          };\n        })\n      }, extraInfo); // Format value by `treeCheckStrictly`\n\n\n      var selectorValueList = formatSelectorValue(valueList, _this.props, valueEntities);\n\n      if (!('value' in _this.props)) {\n        var newState = {\n          missValueList: missValueList,\n          valueList: valueList,\n          selectorValueList: selectorValueList\n        };\n\n        if (searchValue && treeCheckable && !treeCheckStrictly) {\n          newState.searchHalfCheckedKeys = getHalfCheckedKeys(valueList, valueEntities);\n        }\n\n        _this.setState(newState);\n      } // Only do the logic when `onChange` function provided\n\n\n      if (onChange) {\n        var connectValueList; // Get value by mode\n\n        if (_this.isMultiple()) {\n          connectValueList = [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList));\n        } else {\n          connectValueList = selectorValueList.slice(0, 1);\n        }\n\n        var labelList = null;\n        var returnValue;\n\n        if (_this.isLabelInValue()) {\n          returnValue = connectValueList.map(function (_ref19) {\n            var label = _ref19.label,\n                value = _ref19.value;\n            return {\n              label: label,\n              value: value\n            };\n          });\n        } else {\n          labelList = [];\n          returnValue = connectValueList.map(function (_ref20) {\n            var label = _ref20.label,\n                value = _ref20.value;\n            labelList.push(label);\n            return value;\n          });\n        }\n\n        if (!_this.isMultiple()) {\n          returnValue = returnValue[0];\n        }\n\n        onChange(returnValue, labelList, extra);\n      }\n    });\n\n    var prefixAria = _props.prefixAria,\n        defaultOpen = _props.defaultOpen,\n        _open = _props.open;\n    _this.state = {\n      open: _open || defaultOpen,\n      valueList: [],\n      searchHalfCheckedKeys: [],\n      missValueList: [],\n      // Contains the value not in the tree\n      selectorValueList: [],\n      // Used for multiple selector\n      valueEntities: {},\n      keyEntities: {},\n      searchValue: '',\n      init: true\n    };\n    _this.selectorRef = createRef();\n    _this.selectTriggerRef = createRef(); // ARIA need `aria-controls` props mapping\n    // Since this need user input. Let's generate ourselves\n\n    _this.ariaId = generateAriaId(\"\".concat(prefixAria, \"-list\"));\n    return _this;\n  }\n\n  _createClass(Select, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        rcTreeSelect: {\n          onSelectorFocus: this.onSelectorFocus,\n          onSelectorBlur: this.onSelectorBlur,\n          onSelectorKeyDown: this.onComponentKeyDown,\n          onSelectorClear: this.onSelectorClear,\n          onMultipleSelectorRemove: this.onMultipleSelectorRemove,\n          onTreeNodeSelect: this.onTreeNodeSelect,\n          onTreeNodeCheck: this.onTreeNodeCheck,\n          onPopupKeyDown: this.onComponentKeyDown,\n          onSearchInputChange: this.onSearchInputChange,\n          onSearchInputKeyDown: this.onSearchInputKeyDown\n        }\n      };\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props7 = this.props,\n          autoFocus = _this$props7.autoFocus,\n          disabled = _this$props7.disabled;\n\n      if (autoFocus && !disabled) {\n        this.focus();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_, prevState) {\n      var valueList = this.state.valueList;\n\n      if (prevState.valueList !== valueList) {\n        this.forcePopupAlign();\n      }\n    } // ==================== Selector ====================\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.selectorRef.current.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.selectorRef.current.blur();\n    } // ===================== Render =====================\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state8 = this.state,\n          valueList = _this$state8.valueList,\n          missValueList = _this$state8.missValueList,\n          selectorValueList = _this$state8.selectorValueList,\n          searchHalfCheckedKeys = _this$state8.searchHalfCheckedKeys,\n          valueEntities = _this$state8.valueEntities,\n          keyEntities = _this$state8.keyEntities,\n          searchValue = _this$state8.searchValue,\n          open = _this$state8.open,\n          focused = _this$state8.focused,\n          treeNodes = _this$state8.treeNodes,\n          filteredTreeNodes = _this$state8.filteredTreeNodes;\n      var _this$props8 = this.props,\n          prefixCls = _this$props8.prefixCls,\n          treeExpandedKeys = _this$props8.treeExpandedKeys,\n          onTreeExpand = _this$props8.onTreeExpand;\n      var isMultiple = this.isMultiple();\n\n      var passProps = _objectSpread({}, this.props, {\n        isMultiple: isMultiple,\n        valueList: valueList,\n        searchHalfCheckedKeys: searchHalfCheckedKeys,\n        selectorValueList: [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList)),\n        valueEntities: valueEntities,\n        keyEntities: keyEntities,\n        searchValue: searchValue,\n        upperSearchValue: (searchValue || '').toUpperCase(),\n        // Perf save\n        open: open,\n        focused: focused,\n        onChoiceAnimationLeave: this.onChoiceAnimationLeave,\n        dropdownPrefixCls: \"\".concat(prefixCls, \"-dropdown\"),\n        ariaId: this.ariaId\n      });\n\n      var Popup = isMultiple ? MultiplePopup : SinglePopup;\n      var $popup = React.createElement(Popup, _extends({}, passProps, {\n        onTreeExpanded: this.delayForcePopupAlign,\n        treeNodes: treeNodes,\n        filteredTreeNodes: filteredTreeNodes // Tree expanded control\n        ,\n        treeExpandedKeys: treeExpandedKeys,\n        onTreeExpand: onTreeExpand\n      }));\n      var Selector = isMultiple ? MultipleSelector : SingleSelector;\n      var $selector = React.createElement(Selector, _extends({}, passProps, {\n        ref: this.selectorRef\n      }));\n      return React.createElement(SelectTrigger, _extends({}, passProps, {\n        ref: this.selectTriggerRef,\n        popupElement: $popup,\n        onKeyDown: this.onKeyDown,\n        onDropdownVisibleChange: this.onDropdownVisibleChange\n      }), $selector);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _prevState$prevProps = prevState.prevProps,\n          prevProps = _prevState$prevProps === void 0 ? {} : _prevState$prevProps;\n      var treeCheckable = nextProps.treeCheckable,\n          treeCheckStrictly = nextProps.treeCheckStrictly,\n          filterTreeNode = nextProps.filterTreeNode,\n          treeNodeFilterProp = nextProps.treeNodeFilterProp,\n          treeDataSimpleMode = nextProps.treeDataSimpleMode;\n      var newState = {\n        prevProps: nextProps,\n        init: false\n      }; // Process the state when props updated\n\n      function processState(propName, updater) {\n        if (prevProps[propName] !== nextProps[propName]) {\n          updater(nextProps[propName], prevProps[propName]);\n          return true;\n        }\n\n        return false;\n      }\n\n      var valueRefresh = false; // Open\n\n      processState('open', function (propValue) {\n        newState.open = propValue;\n      }); // Tree Nodes\n\n      var treeNodes;\n      var treeDataChanged = false;\n      var treeDataModeChanged = false;\n      processState('treeData', function (propValue) {\n        treeNodes = convertDataToTree(propValue);\n        treeDataChanged = true;\n      });\n      processState('treeDataSimpleMode', function (propValue, prevValue) {\n        if (!propValue) return;\n        var prev = !prevValue || prevValue === true ? {} : prevValue; // Shallow equal to avoid dynamic prop object\n\n        if (!shallowEqual(propValue, prev)) {\n          treeDataModeChanged = true;\n        }\n      }); // Parse by `treeDataSimpleMode`\n\n      if (treeDataSimpleMode && (treeDataChanged || treeDataModeChanged)) {\n        var simpleMapper = _objectSpread({\n          id: 'id',\n          pId: 'pId',\n          rootPId: null\n        }, treeDataSimpleMode !== true ? treeDataSimpleMode : {});\n\n        treeNodes = convertDataToTree(parseSimpleTreeData(nextProps.treeData, simpleMapper));\n      } // If `treeData` not provide, use children TreeNodes\n\n\n      if (!nextProps.treeData) {\n        processState('children', function (propValue) {\n          treeNodes = Array.isArray(propValue) ? propValue : [propValue];\n        });\n      } // Convert `treeData` to entities\n\n\n      if (treeNodes) {\n        var entitiesMap = convertTreeToEntities(treeNodes);\n        newState.treeNodes = treeNodes;\n        newState.posEntities = entitiesMap.posEntities;\n        newState.valueEntities = entitiesMap.valueEntities;\n        newState.keyEntities = entitiesMap.keyEntities;\n        valueRefresh = true;\n      } // Value List\n\n\n      if (prevState.init) {\n        processState('defaultValue', function (propValue) {\n          newState.valueList = formatInternalValue(propValue, nextProps);\n          valueRefresh = true;\n        });\n      }\n\n      processState('value', function (propValue) {\n        newState.valueList = formatInternalValue(propValue, nextProps);\n        valueRefresh = true;\n      }); // Selector Value List\n\n      if (valueRefresh) {\n        // Find out that value not exist in the tree\n        var missValueList = [];\n        var filteredValueList = [];\n        var keyList = []; // Get latest value list\n\n        var latestValueList = newState.valueList;\n\n        if (!latestValueList) {\n          // Also need add prev missValueList to avoid new treeNodes contains the value\n          latestValueList = [].concat(_toConsumableArray(prevState.valueList), _toConsumableArray(prevState.missValueList));\n        } // Get key by value\n\n\n        latestValueList.forEach(function (wrapperValue) {\n          var value = wrapperValue.value;\n          var entity = (newState.valueEntities || prevState.valueEntities)[value];\n\n          if (entity) {\n            keyList.push(entity.key);\n            filteredValueList.push(wrapperValue);\n            return;\n          } // If not match, it may caused by ajax load. We need keep this\n\n\n          missValueList.push(wrapperValue);\n        }); // We need calculate the value when tree is checked tree\n\n        if (treeCheckable && !treeCheckStrictly) {\n          // Calculate the keys need to be checked\n          var _conductCheck = conductCheck(keyList, true, newState.keyEntities || prevState.keyEntities),\n              checkedKeys = _conductCheck.checkedKeys; // Format value list again for internal usage\n\n\n          newState.valueList = checkedKeys.map(function (key) {\n            return {\n              value: (newState.keyEntities || prevState.keyEntities)[key].value\n            };\n          });\n        } else {\n          newState.valueList = filteredValueList;\n        } // Fill the missValueList, we still need display in the selector\n\n\n        newState.missValueList = missValueList; // Calculate the value list for `Selector` usage\n\n        newState.selectorValueList = formatSelectorValue(newState.valueList, nextProps, newState.valueEntities || prevState.valueEntities);\n      } // [Legacy] To align with `Select` component,\n      // We use `searchValue` instead of `inputValue` but still keep the api\n      // `inputValue` support `null` to work as `autoClearSearchValue`\n\n\n      processState('inputValue', function (propValue) {\n        if (propValue !== null) {\n          newState.searchValue = propValue;\n        }\n      }); // Search value\n\n      processState('searchValue', function (propValue) {\n        newState.searchValue = propValue;\n      }); // Do the search logic\n\n      if (newState.searchValue !== undefined || prevState.searchValue && treeNodes) {\n        var searchValue = newState.searchValue !== undefined ? newState.searchValue : prevState.searchValue;\n        var upperSearchValue = String(searchValue).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n\n        if (filterTreeNode === false) {\n          // Don't filter if is false\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (typeof filterTreeNodeFn !== 'function') {\n          // When is not function (true or undefined), use inner filter\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(node.props[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        newState.filteredTreeNodes = getFilterTree(newState.treeNodes || prevState.treeNodes, searchValue, filterTreeNodeFn, newState.valueEntities || prevState.valueEntities);\n      } // We should re-calculate the halfCheckedKeys when in search mode\n\n\n      if (valueRefresh && treeCheckable && !treeCheckStrictly && (newState.searchValue || prevState.searchValue)) {\n        newState.searchHalfCheckedKeys = getHalfCheckedKeys(newState.valueList, newState.valueEntities || prevState.valueEntities);\n      } // Checked Strategy\n\n\n      processState('showCheckedStrategy', function () {\n        newState.selectorValueList = newState.selectorValueList || formatSelectorValue(newState.valueList || prevState.valueList, nextProps, newState.valueEntities || prevState.valueEntities);\n      });\n      return newState;\n    }\n  }]);\n\n  return Select;\n}(React.Component);\n\n_defineProperty(Select, \"propTypes\", {\n  prefixCls: PropTypes.string,\n  prefixAria: PropTypes.string,\n  multiple: PropTypes.bool,\n  showArrow: PropTypes.bool,\n  open: PropTypes.bool,\n  value: valueProp,\n  autoFocus: PropTypes.bool,\n  defaultOpen: PropTypes.bool,\n  defaultValue: valueProp,\n  showSearch: PropTypes.bool,\n  placeholder: PropTypes.node,\n  inputValue: PropTypes.string,\n  // [Legacy] Deprecated. Use `searchValue` instead.\n  searchValue: PropTypes.string,\n  autoClearSearchValue: PropTypes.bool,\n  searchPlaceholder: PropTypes.node,\n  // [Legacy] Confuse with placeholder\n  disabled: PropTypes.bool,\n  children: PropTypes.node,\n  labelInValue: PropTypes.bool,\n  maxTagCount: PropTypes.number,\n  maxTagPlaceholder: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  maxTagTextLength: PropTypes.number,\n  showCheckedStrategy: PropTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),\n  dropdownMatchSelectWidth: PropTypes.bool,\n  treeData: PropTypes.array,\n  treeDataSimpleMode: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  treeNodeFilterProp: PropTypes.string,\n  treeNodeLabelProp: PropTypes.string,\n  treeCheckable: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n  treeCheckStrictly: PropTypes.bool,\n  treeIcon: PropTypes.bool,\n  treeLine: PropTypes.bool,\n  treeDefaultExpandAll: PropTypes.bool,\n  treeDefaultExpandedKeys: PropTypes.array,\n  treeExpandedKeys: PropTypes.array,\n  loadData: PropTypes.func,\n  filterTreeNode: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  notFoundContent: PropTypes.node,\n  onSearch: PropTypes.func,\n  onSelect: PropTypes.func,\n  onDeselect: PropTypes.func,\n  onChange: PropTypes.func,\n  onDropdownVisibleChange: PropTypes.func,\n  onTreeExpand: PropTypes.func,\n  inputIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  clearIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  removeIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  switcherIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func])\n});\n\n_defineProperty(Select, \"childContextTypes\", {\n  rcTreeSelect: PropTypes.shape(_objectSpread({}, selectorContextTypes, multipleSelectorContextTypes, popupContextTypes, {\n    onSearchInputChange: PropTypes.func,\n    onSearchInputKeyDown: PropTypes.func\n  }))\n});\n\n_defineProperty(Select, \"defaultProps\", {\n  prefixCls: 'rc-tree-select',\n  prefixAria: 'rc-tree-select',\n  showArrow: true,\n  showSearch: true,\n  autoClearSearchValue: true,\n  showCheckedStrategy: SHOW_CHILD,\n  // dropdownMatchSelectWidth change the origin design, set to false now\n  // ref: https://github.com/react-component/select/blob/4cad95e098a341a09de239ad6981067188842020/src/Select.jsx#L344\n  // ref: https://github.com/react-component/select/pull/71\n  treeNodeFilterProp: 'value',\n  treeNodeLabelProp: 'title',\n  treeIcon: false,\n  notFoundContent: 'Not Found'\n});\n\nSelect.TreeNode = SelectNode;\nSelect.SHOW_ALL = SHOW_ALL;\nSelect.SHOW_PARENT = SHOW_PARENT;\nSelect.SHOW_CHILD = SHOW_CHILD; // Let warning show correct component name\n\nSelect.displayName = 'TreeSelect';\npolyfill(Select);\nexport default Select;"]}]}