{"remainingRequest":"C:\\Users\\liuli\\source\\repos\\github\\WalkingTec.Mvvm\\WebApplication2\\ClientApp\\node_modules\\babel-loader\\lib\\index.js??ref--4-oneOf-1-1!C:\\Users\\liuli\\source\\repos\\github\\WalkingTec.Mvvm\\WebApplication2\\ClientApp\\node_modules\\querystringify\\index.js","dependencies":[{"path":"C:\\Users\\liuli\\source\\repos\\github\\WalkingTec.Mvvm\\WebApplication2\\ClientApp\\node_modules\\querystringify\\index.js","mtime":499162500000},{"path":"C:\\Users\\liuli\\source\\repos\\github\\WalkingTec.Mvvm\\WebApplication2\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\liuli\\source\\repos\\github\\WalkingTec.Mvvm\\WebApplication2\\ClientApp\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["'use strict';\n\nvar has = Object.prototype.hasOwnProperty,\n    undef;\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String} The decoded string.\n * @api private\n */\n\nfunction decode(input) {\n  return decodeURIComponent(input.replace(/\\+/g, ' '));\n}\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\n\n\nfunction querystring(query) {\n  var parser = /([^=?&]+)=?([^&]*)/g,\n      result = {},\n      part;\n\n  while (part = parser.exec(query)) {\n    var key = decode(part[1]),\n        value = decode(part[2]); //\n    // Prevent overriding of existing properties. This ensures that build-in\n    // methods like `toString` or __proto__ are not overriden by malicious\n    // querystrings.\n    //\n\n    if (key in result) continue;\n    result[key] = value;\n  }\n\n  return result;\n}\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\n\n\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n  var pairs = [],\n      value,\n      key; //\n  // Optionally prefix with a '?' if needed\n  //\n\n  if ('string' !== typeof prefix) prefix = '?';\n\n  for (key in obj) {\n    if (has.call(obj, key)) {\n      value = obj[key]; //\n      // Edge cases where we actually want to encode the value to an empty\n      // string instead of the stringified value.\n      //\n\n      if (!value && (value === null || value === undef || isNaN(value))) {\n        value = '';\n      }\n\n      pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n} //\n// Expose the module.\n//\n\n\nexports.stringify = querystringify;\nexports.parse = querystring;",{"version":3,"sources":["C:\\Users\\liuli\\source\\repos\\github\\WalkingTec.Mvvm\\WebApplication2\\ClientApp\\node_modules\\querystringify\\index.js"],"names":["has","Object","prototype","hasOwnProperty","undef","decode","input","decodeURIComponent","replace","querystring","query","parser","result","part","exec","key","value","querystringify","obj","prefix","pairs","call","isNaN","push","encodeURIComponent","length","join","exports","stringify","parse"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,MAAM,CAACC,SAAP,CAAiBC,cAA3B;AAAA,IACIC,KADJ;AAGA;;;;;;;;AAOA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,SAAOC,kBAAkB,CAACD,KAAK,CAACE,OAAN,CAAc,KAAd,EAAqB,GAArB,CAAD,CAAzB;AACD;AAED;;;;;;;;;AAOA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,MAAIC,MAAM,GAAG,qBAAb;AAAA,MACIC,MAAM,GAAG,EADb;AAAA,MAEIC,IAFJ;;AAIA,SAAOA,IAAI,GAAGF,MAAM,CAACG,IAAP,CAAYJ,KAAZ,CAAd,EAAkC;AAChC,QAAIK,GAAG,GAAGV,MAAM,CAACQ,IAAI,CAAC,CAAD,CAAL,CAAhB;AAAA,QACIG,KAAK,GAAGX,MAAM,CAACQ,IAAI,CAAC,CAAD,CAAL,CADlB,CADgC,CAIhC;AACA;AACA;AACA;AACA;;AACA,QAAIE,GAAG,IAAIH,MAAX,EAAmB;AACnBA,IAAAA,MAAM,CAACG,GAAD,CAAN,GAAcC,KAAd;AACD;;AAED,SAAOJ,MAAP;AACD;AAED;;;;;;;;;;AAQA,SAASK,cAAT,CAAwBC,GAAxB,EAA6BC,MAA7B,EAAqC;AACnCA,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;AAEA,MAAIC,KAAK,GAAG,EAAZ;AAAA,MACIJ,KADJ;AAAA,MAEID,GAFJ,CAHmC,CAOnC;AACA;AACA;;AACA,MAAI,aAAa,OAAOI,MAAxB,EAAgCA,MAAM,GAAG,GAAT;;AAEhC,OAAKJ,GAAL,IAAYG,GAAZ,EAAiB;AACf,QAAIlB,GAAG,CAACqB,IAAJ,CAASH,GAAT,EAAcH,GAAd,CAAJ,EAAwB;AACtBC,MAAAA,KAAK,GAAGE,GAAG,CAACH,GAAD,CAAX,CADsB,CAGtB;AACA;AACA;AACA;;AACA,UAAI,CAACC,KAAD,KAAWA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKZ,KAA5B,IAAqCkB,KAAK,CAACN,KAAD,CAArD,CAAJ,EAAmE;AACjEA,QAAAA,KAAK,GAAG,EAAR;AACD;;AAEDI,MAAAA,KAAK,CAACG,IAAN,CAAWC,kBAAkB,CAACT,GAAD,CAAlB,GAAyB,GAAzB,GAA8BS,kBAAkB,CAACR,KAAD,CAA3D;AACD;AACF;;AAED,SAAOI,KAAK,CAACK,MAAN,GAAeN,MAAM,GAAGC,KAAK,CAACM,IAAN,CAAW,GAAX,CAAxB,GAA0C,EAAjD;AACD,C,CAED;AACA;AACA;;;AACAC,OAAO,CAACC,SAAR,GAAoBX,cAApB;AACAU,OAAO,CAACE,KAAR,GAAgBpB,WAAhB","sourcesContent":["'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , undef;\n\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String} The decoded string.\n * @api private\n */\nfunction decode(input) {\n  return decodeURIComponent(input.replace(/\\+/g, ' '));\n}\n\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\nfunction querystring(query) {\n  var parser = /([^=?&]+)=?([^&]*)/g\n    , result = {}\n    , part;\n\n  while (part = parser.exec(query)) {\n    var key = decode(part[1])\n      , value = decode(part[2]);\n\n    //\n    // Prevent overriding of existing properties. This ensures that build-in\n    // methods like `toString` or __proto__ are not overriden by malicious\n    // querystrings.\n    //\n    if (key in result) continue;\n    result[key] = value;\n  }\n\n  return result;\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n\n  var pairs = []\n    , value\n    , key;\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) prefix = '?';\n\n  for (key in obj) {\n    if (has.call(obj, key)) {\n      value = obj[key];\n\n      //\n      // Edge cases where we actually want to encode the value to an empty\n      // string instead of the stringified value.\n      //\n      if (!value && (value === null || value === undef || isNaN(value))) {\n        value = '';\n      }\n\n      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(value));\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n}\n\n//\n// Expose the module.\n//\nexports.stringify = querystringify;\nexports.parse = querystring;\n"]}]}